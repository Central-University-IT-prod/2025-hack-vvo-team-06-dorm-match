* Product plan
+ *Цель и миссия продукта*
  - *Цель DormMatch*: упростить размещение студентов в общежитии, учитвыя их личные привычки, дабы снизить процент возникаемых кофликтов. Тем самым Dorm Match позволяет подбирать наилучших соседей в общежитии на основании: хобби, режима дня, факультета и т.п
    
  - *Ценности, которые приносит DormMatch:*
    Для студентов -
    1) Улучшить коммуникацию между жильцами
    2) Снизить риск возникновения конфликтов
    3) Найти человека со схожими интересами и ценностями

    Для администрации -
    1) Снизить нагрузку, возникаемую жалобами жильцов из-за неверного размещения студентов
    2) (Частично) автоматизировать процесс заселения жильцов
    3) Упрощение аналитики в общежитии. Например, процент незаполненных или пустующих комнат

+ *Проблемы, которые имеют...*:
- Студенты:
  + Нет доступа к актуальной информации о комнатах.
  + Игнорирование предпочтений приводит к конфликтам.
  + Непрозрачный процесс подачи заявок вызывает недовольство.
    
- Администрация:
  + Ручная обработка заявок занимает часы.
  + Жалобы из-за неподходящих соседей.
  + Отсутствие аналитики по заполненности.

- Университет:
  + Репутационные риски из-за недовольства студентов.
  + Неэффективное использование комнат.

+ *Целевая аудитория DormMatch*
  - Студенты бакалавриата и магистратуры (18–30 лет), включая иностранных.
  - Поведение: активные пользователи смартфонов, ожидают цифровых решений.

Потребности: удобный поиск комнат, прозрачность, комфортное проживание.

+ *Критерии оценивания "схожести" между студентами*
  + Администрация: да/нет
  + Инстранный: да/нет
  + Возраст: [16-45]
  + Пол: м/ж
  + Тип MBTI (опционально): 1 из 16
    (совместимость типов личности статична. Информация доступна из Интернета)
  + Часы бодрствования (1 из 3х вариантов): жаворонок, сова, голубь

*ВАЖНО: для пользования сервисом сам ВУЗ должен подтвердить пользование им и предоставить базу данных студентов, которые учатся в данный момент времени. Это необходимо, чтобы проверять пользователей на то, являются ли они студентами данного ВУЗа в данный момент времени, или же нет.*

+ *Воркфлоу приложения*

  1. Пользователь уже зарегистрирован как студент/администрация: 
     + Да:
       Спрашивается, пользователь студент или представитель администрации ВУЗа

       - Если студент И он не числится жильцом в какой-либо комнате:
         Выводится список доступных комнат (в который >=1 свободных мест), отсортированных по проценту схожести с пользователем

       - Если студент И он числится жильцом в какой-либо комнате:
         Не выводить список комнат

       - Если администрация:
         Показывать список комнат с жильцами и процентом метча между всеми жильцами

     + Нет:
       Спрашивается, пользователь студент или представитель администрации ВУЗа
          
       + Администратор:
           Отправляется заявка в тех. поддержку DormMatch, которая, в свою очередь, связывается с ВУЗом и подтверждает заявку администратора на пользование приложением, в случае, если Администратор предоставил данные паспорта и подтвердил, что является администрацией данного ВУЗа

       + Студент:
         1. Спрашиваются основные данные пользователя для метча (см. Критерии оценивания "схожести" между студентами)
         2. Запрашивается его паспорт
         3. Подается заявка в администрацию ВУЗа, которая поверяет, числится ли данный студент учащимся в данном заведении
            
* Architecture plan
MVP-функционал (на основе продукт-плана):

+ Регистрация и аутентификация (студенты, администрация).
+ Управление профилями студентов (включая критерии схожести).
+ Управление комнатами (добавление, просмотр, фильтрация).
+ Подача и обработка заявок.
+ Алгоритм подбора (Matching) по критериям схожести.
+ Аналитика для администрации (заполненность комнат).
+ Уведомления (базовые, например, email).

База данных:
+ PostgreSQL: Основная реляционная БД для хранения пользователей, комнат, заявок.
+ Redis: Кэширование списков комнат, сессий, очереди для уведомлений.

Интеграция с ВУЗом:
 ВУЗ предоставляет CSV-файл с данными студентов (ID, email, факультет, курс) для верификации.

------

Стек технологий:

+ Frontend:
  Nextjs
  Shadcn
  
+ Backend:
  Rust
  Actix
  Redis
  PostgreSQL

** Backend
Построен с использованием микросервисной архитектуры.

Каждый сервис имеет следующую архитектуру:
+ ~controllers~
+ ~services~
+ ~middleware~
+ ~config~

  -----

# "services/user",
# "services/application",
# "services/matching",
# "services/analytics",


+ ~common~ -- общие сущности и методы, которые предназначены для переиспользования в других сервисах
  - ~models~
  - ~repositories~
    
+ ~auth~ -- сервис авторизации
  + сервисы:
    - auth

  + контроллеры
    - 

+ ~room-management~
  Endpoints: ~/rooms~, ~/applications~, ~/applications/{id}/status~.
  
*** Entities

**** Room


*** DONE Common-сервис 
CLOSED: [2025-04-26 Сб 06:54]
:LOGBOOK:
CLOCK: [2025-04-25 Пт 17:07]
CLOCK: [2025-04-25 Пт 16:47]--[2025-04-25 Пт 16:47] =>  0:00
:END:

*** DONE Сервис авторизации 
CLOSED: [2025-04-26 Сб 07:21]
:LOGBOOK:
CLOCK: [2025-04-25 Пт 16:47]--[2025-04-25 Пт 17:07] =>  0:20
:END:
*** TODO Подключить Swagger
*** TODO Room-management-сервис
** Frontend
